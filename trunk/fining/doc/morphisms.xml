<!-- 

  morphisms.xml    FinInG package documentation
                                                                   John Bamberg
                                                                   Anton Betten
                                                                   Jan De Beule
                                                                  Philippe Cara
                                                                 Michel Lavrauw
                                                                  and Maska Law
                                                             and Michael Pauley
                                                            and Max Neunhoeffer
                                                              and Sven Reichard

  Copyright (C) 2008, University of Western Australia
                      Colorado State University
                      Lehrstuhl D fuer Mathematik
                      Ghent University
                      Vrije Universiteit Brussel

This is the chapter of the documentation describing geometry morphisms.

XML code to remember:
<A> </A>:  for arguments
<E> </A>:  emphasise
<C> </C>:  for code
<M> </M>:  maths

-->

<Chapter Label="morphisms">
<Heading>Geometry Morphisms</Heading>

Here we describe what is meant by a <E>geometry morphism</E>
in <Package>FinInG</Package> and the various operations and tools available
to the user.

<Section>
<Heading>Geometry morphisms in FinInG</Heading>

Suppose that <M>S</M> and <M>S'</M> are two incidence geometries. 
A <E>geometry morphism</E> from <M>S</M> to <M>S'</M> is defined to be a map
from the elements of <M>S</M> to the elements of <M>S'</M> which preserves
incidence and induces a function from the type set of <M>S</M> to the
type set of <M>S'</M>. For instance, a correlation and a collineation are
examples of geometry morphisms, but they have been dealt with in more specific
ways in <Package>FinInG</Package>.  We will mainly be concerned with geometry
morphisms where the source and range are different. Hence, the natural embedding
of a projective space in a larger projective space, the mapping induced by field
reduction, and the Klein correspondence are examples of such geometry morphisms.

<ManSection>
<Fam Name = "IsGeometryMorphism"/>
<Description>
The category <C>IsGeometryMorphism</C> represents a special object
in <Package>FinInG</Package> which carries attributes and the given element
map. The element map is given as a <C>IsGeneralMapping</C>, and so has a source
and range.
<Example>
gap> ShowImpliedFilters(IsGeometryMorphism);
Implies:
   IsGeneralMapping
   IsTotal
   Tester(IsTotal)
   IsSingleValued
   Tester(IsSingleValued)
</Example>
The usual operations of <C>ImagesElm</C>, <C>ImagesSet</C>, <C>PreImagesElm</C>, 
<C>PreImagesSet</C> work for geometry
morphisms, as well as the overload operator <C>\^</C>. Since <C>Image</C> is
a &GAP; function, we advise the user to not use this for geometry morphisms.
</Description>
</ManSection>

For some geometry morphisms, there is also an accompanying intertwiner for
the automorphism groups of the source range. Given a geometry morphism
<M>f</M> from <M>S</M> to <M>S'</M>, an intertwiner <Alt Not="HTML"><M>\phi</M></Alt>
<Alt Only="HTML">&#966;</Alt> is a map
from the automorphism group of <M>S</M> to the automorphism group of 
<M>S'</M>, such that for every element <M>p</M> of <M>S</M> and every
automorphism <M>g</M> of <M>S</M>, we have
<Alt Not="HTML"><Display> f(p^g) = f(p)^{\phi(g)} .</Display></Alt>
<Alt Only="HTML"><Display>f(p&lt;sup>g&lt;/sup>)=f(p)&lt;sup>&#966;(g)&lt;/sup>.</Display></Alt>

<ManSection>
<Attr Name = "Intertwiner" Arg = "f"/>
<Returns>a group homomorphism</Returns>
<Description>
The arguments <A>f</A> is a geometry morphism. If <A>f</A> comes equipped with
a natural intertwiner from an automorphism group of the source of <A>f</A> to
the automorphism group to the image of <A>f</A>, then the user may be able
to obtain the intertwiner by calling this operation (see the individual geometry
morphism constructions). Here is a simple example of the intertwiner for the isomorphism
of two polar spaces (see <Ref Oper="IsomorphismPolarSpaces" Style="Text"/>). The source of the 
homomorphism is dependent on the geometry.
<Example>
<#Include SYSTEM "../examples/include/morphisms_intertwiners.include"> 
</Example>
</Description>
</ManSection>

<ManSection>
<Oper Name="IsomorphismPolarSpaces" Arg="ps1, ps2"/>
<Oper Name="IsomorphismPolarSpaces" Arg="ps1, ps2, boolean"/>
<Returns>a geometry morphism</Returns>
<Description>
The arguments <A>ps1</A> and <A>ps2</A> are equivalent polar spaces, and this
function returns a geometry isomorphism between them. 
The optional third argument <A>boolean</A> can take either <C>true</C> or
<C>false</C> as input, and then our operation will or will not compute the 
intertwiner accordingly. The user may wish that the intertwiner is not computed
when working with large polar spaces. The default (when calling the operation
with two arguments) is set to <C>true</C>, and in this case,
if at least one of <A>ps1</A> or <A>ps2</A> has
a collineation group installed as an attribute, then an intertwining
homomorphism is installed as an attribute. That is, we also obtain a natural
group isomorphism from the collineation group of <A>ps1</A> onto the collineation
group of <A>ps2</A> (see also <Ref Attr="Intertwiner" Style="Text"/>).
<Example>
<#Include SYSTEM "../examples/include/morphisms_isopolar.include"> 
</Example>
</Description>

<Description>
Both functions also have a "no check" version.
</Description>
<Oper Name="IsomorphismPolarSpacesNC" Arg="ps1, ps2"/>
<Oper Name="IsomorphismPolarSpacesNC" Arg="ps1, ps2, boolean"/>
</ManSection>

</Section>

<Section>
<Heading>When will you use geometry morphisms?</Heading>

When using groups in &GAP;, we often use homomorphisms to pass from
one situation to another, even though mathematically it may appear to
be unneccessary, there can be ambiguities if the functionality
is too flexible. This also applies to finite geometry. Take for example
the usual exercise of thinking of a hyperplane in a projective
space as another projective space. To conform with similar things in
&GAP;, the right thing to do is to embed one projective space into another,
rather than having one projective space automatically a substructure
of another. The reason for this is that there are many ways one can
do this embedding, even though we may dispense with this choice when we
are working mathematically. So to avoid ambiguity, we stipulate that
one should construct the embedding explicitly. How this is done will
be the subject of the following section.
</Section>


<Section>
<Heading>Natural geometry morphisms</Heading>

The most natural of geometry morphisms include, for example, the embedding of a
projective space into another via a subspace, or the projection of a polar space
to a smaller polar space of the same type via a totally isotropic subspace.


<ManSection>
<Oper Name="NaturalEmbeddingBySubspace" Arg="geom1, geom2, v"/>
<Oper Name="NaturalEmbeddingBySubspaceNC" Arg="geom1, geom2, v"/>
<Returns>a geometry morphism</Returns>
<Description>
The arguments <A>geom1</A> and <A>geom2</A> are both projective spaces,
or both polar spaces, and <A>v</A> is an element of a projective or polar space.  This function
returns a geometry morphism representing the natural embedding of <A>geom1</A>
into <A>geom2</A> as the subspace <A>v</A>. Hence <A>geom1</A> and <A>v</A> must
be equivalent as geometries. The operation <C>NaturalEmbeddingBySubspaceNC</C>
is the ``no check'' version of <C>NaturalEmbeddingBySubspace</C>.
<Example>
<#Include SYSTEM "../examples/include/morphisms_embedding1.include"> 
</Example>
Another example, this time with polar spaces:
<Example>
<#Include SYSTEM "../examples/include/morphisms_embedding2.include"> 
</Example>
</Description>
</ManSection>

<ManSection>
<Oper Name="NaturalEmbeddingByFieldReduction" Arg="geom1, f2, B"/>
<Oper Name="NaturalEmbeddingByFieldReduction" Arg="geom1, f2"/>
<Oper Name="NaturalEmbeddingByFieldReduction" Arg="geom1, geom2"/>
<Oper Name="NaturalEmbeddingByFieldReduction" Arg="geom1, geom2, B"/>
<Returns>a geometry morphism</Returns>
<Description>
This operation comes in four flavours. For the first flavour, the argument <A>geom1</A> is a projective 
space over a field <Alt Not="HTML"><M>L=GF(q^t)</M></Alt><Alt Only="HTML">GF(q&lt;sup>t&lt;/sup>)</Alt>.
The argument <A>f2</A> is a subfield <M>K=GF(q)</M> of <M>L</M>. The argument <M>B</M>
is a basis for <M>L</M> as a <M>K</M>-vectorspace. When this argument is not given, a basis for <M>L</M> over <M>K</M>
is computed using <F>Basis(AsVectorSpace(K,L)</F>. It is checked whether <A>f2</A> is a subfield of the basefield of
<A>geom1</A>. The third and fourth flavour are comparable, where now <M>K</M> is found as the basefield of <A>geom2</A>.
In fact the arguments <A>geom1</A> and <A>geom2</A> are the projective spaces
<Alt Not="HTML"><M>PG(r-1,q^t)</M></Alt><Alt Only="HTML">PG(r-1,q&lt;sup>t&lt;/sup>)</Alt> and
<Alt Not="HTML"><M>PG(rt-1,q)</M></Alt><Alt Only="HTML">PG(rt-1,q)</Alt> respectively. As in the previous flavours, the 
argument <A>B</A> is optional.
<Example>
<#Include SYSTEM "../examples/include/morphisms_fieldreducproj.include"> 
</Example>
</Description>
</ManSection>

<ManSection>
<Oper Name="Intertwiner" Arg="em"/>
<Returns>an intertwiner for a geometry morphism</Returns>
<Description>
The argument <A>em</A> is a geometry morphism constructed from <Alt Not="HTML"><M>PG(r-1,q^t)</M></Alt>
<Alt Only="HTML">PG(r-1,q&lt;sup>t&lt;/sup>)</Alt> into <Alt Not="HTML"><M>PG(rt-1,q)</M></Alt>
<Alt Only="HTML">PG(rt-1,q)</Alt>. The intertwiner of <A>em</A> will return a homomorphisms from the <E>homography</E>
group of <Alt Not="HTML"><M>PG(r-1,q^t)</M></Alt><Alt Only="HTML">PG(r-1,q&lt;sup>t&lt;/sup>)</Alt> into the
collineation group of <Alt Not="HTML"><M>PG(rt-1,q)</M></Alt><Alt Only="HTML">PG(rt-1,q)</Alt>. Notice in the example 
below the difference of a factor 2 in the orders of the group, which comes of course from restricing the homomorphism to 
the homography group, which differes a factor 2 from the collineation group of the projective line, that has an extra 
automorphism of order two, corresponding with the Frobenius automorphism.
<Example>
<#Include SYSTEM "../examples/include/morphisms_intertwinerproj.include"> 
</Example>
</Description>
</ManSection>

<ManSection>
<Oper Name="NaturalEmbeddingByFieldReduction" Arg="geom1, geom2"/>
<Oper Name="NaturalEmbeddingByFieldReduction" Arg="geom1, geom2, B"/>
<Oper Name="NaturalEmbeddingByFieldReduction" Arg="geom1, geom2, boolean"/>
<Returns>a geometry morphism</Returns>
<Description>
The arguments <A>geom1</A> and <A>geom2</A> are polar spaces.
This function returns a geometry morphism representing the natural embedding
of <A>geom1</A> into <A>geom2</A> via field reduction. By <E>natural</E> for projective spaces,
we mean that the embedding is induced by considering the field <Alt Not="HTML"><M>F_1</M></Alt><Alt Only="HTML">
F&lt;sub>1&lt;/sub></Alt> of <A>geom1</A> as a vector space over the field <Alt Not="HTML"><M>F_2</M></Alt><Alt Only="HTML">
F&lt;sub>2&lt;/sub></Alt> of <A>geom2</A>, perhaps with
a choice of basis <A>B</A> in the case we have projective spaces.
If <A>geom1</A> and <A>geom2</A> are polar spaces, then the only such possible embeddings are
listed in the table below (see <Cite Key="Gill"/>):

<Table Align="l|l|l">
 <Caption>Field reduction of polar spaces</Caption>
  <Row>
   <Item>Polar Space 1</Item><Item>Polar Space 2</Item><Item>Conditions</Item>
  </Row>
 <HorLine/>
 <HorLine/>
  <Row>
   <Item><Alt Not="HTML"><M>W(2n-1,q^a)</M></Alt><Alt Only="HTML">W(2n-1,q&lt;sup>a&lt;/sup>)</Alt></Item>
   <Item><M>W(2na-1,q)</M></Item><Item>--</Item>
  </Row>
 <Row>
   <Item><Alt Not="HTML"><M>Q^+(2n-1,q^a)</M></Alt><Alt Only="HTML">Q&lt;sup>+&lt;/sup>(2n-1,q&lt;sup>a&lt;/sup>)</Alt></Item>
   <Item><Alt Not="HTML"><M>Q^+(2na-1,q)</M></Alt><Alt Only="HTML">Q&lt;sup>+&lt;/sup>(2na-1,q)</Alt></Item>
   <Item>--</Item>
  </Row>
 <Row>
   <Item><Alt Not="HTML"><M>Q^-(2n-1,q^a)</M></Alt><Alt Only="HTML">Q&lt;sup>-&lt;/sup>(2n-1,q&lt;sup>a&lt;/sup>)</Alt></Item>
   <Item><Alt Not="HTML"><M>Q^-(2na-1,q)</M></Alt><Alt Only="HTML">Q&lt;sup>-&lt;/sup>(2na-1,q)</Alt></Item>
   <Item>--</Item>
  </Row>
 <Row>
   <Item><Alt Not="HTML"><M>Q(2n,q^{2a})</M></Alt><Alt Only="HTML">Q(2n,q&lt;sup>2a&lt;/sup>)</Alt></Item>
   <Item><Alt Not="HTML"><M>Q^+(2a(2n+1)-1,q)</M></Alt><Alt Only="HTML">Q&lt;sup>+&lt;/sup>(2a(2n+1)-1,q)</Alt></Item>
   <Item>q=1 mod 4</Item>
 </Row>
 <Row>
  <Item><Alt Not="HTML"><M>Q(2n,q^{2a})</M></Alt><Alt Only="HTML">Q(2n,q&lt;sup>2a&lt;/sup>)</Alt></Item>
  <Item><Alt Not="HTML"><M>Q^-(2a(2n+1)-1,q)</M></Alt><Alt Only="HTML">Q&lt;sup>-&lt;/sup>(2a(2n+1)-1,q)</Alt></Item>
  <Item>q=3 mod 4</Item>
 </Row>
 <Row>
   <Item><Alt Not="HTML"><M>Q(2n,q^{2a+1})</M></Alt><Alt Only="HTML">Q(2n,q&lt;sup>2a+1&lt;/sup>)</Alt></Item>
   <Item><M>Q((2a+1)(2n+1)-1,q)</M></Item>
   <Item>q odd</Item>
 </Row>
<Row>
   <Item><Alt Not="HTML"><M>H(2n,q^{2a+1})</M></Alt><Alt Only="HTML">H(2n,q&lt;sup>2a+1&lt;/sup>)</Alt></Item>
   <Item><M>H((2a+1)(2n+1)-1,q)</M></Item>
   <Item>q square</Item>
 </Row>
<Row>
   <Item><Alt Not="HTML"><M>H(2n,q^{2a})</M></Alt><Alt Only="HTML">H(2n,q&lt;sup>2a&lt;/sup>)</Alt></Item>
   <Item><Alt Not="HTML"><M>Q^+(2a(2n+1)-1,q)</M></Alt><Alt Only="HTML">Q&lt;sup>+&lt;/sup>(2a(2n+1)-1,q)</Alt></Item>
   <Item>q odd square</Item>
 </Row>
<Row>
   <Item><Alt Not="HTML"><M>H(2n-1,q^{2a})</M></Alt><Alt Only="HTML">H(2n-1,q&lt;sup>2a&lt;/sup>)</Alt></Item>
   <Item><Alt Not="HTML"><M>Q^-(4an-1,q)</M></Alt><Alt Only="HTML">Q&lt;sup>-&lt;/sup>(4an-1,q)</Alt></Item>
   <Item>q odd square</Item>
 </Row>
<Row>
   <Item><Alt Not="HTML"><M>H(n,q^{2a})</M></Alt><Alt Only="HTML">H(n,q&lt;sup>2a&lt;/sup>)</Alt></Item>
   <Item><M>W(2n-1,q)</M></Item>
   <Item>--</Item>
 </Row>
</Table>

The geometry morphism also comes equipped with an intertwiner (see 
<Ref Attr="Intertwiner" Style="Text"/>). In the case polar spaces,
this intertwiner has as its domain the isometry group of <A>geom1</A>.
The optional third argument <A>boolean</A> can take either <C>true</C> or
<C>false</C> as input, and then our operation will or will not compute the 
intertwiner accordingly. The user may wish that the intertwiner is not computed
when embedding into large polar spaces. The default (when calling the operation
with two arguments) is set to <C>true</C>.
Here is a simple example where the geometry morphism takes the points
of <M>PG(2,9)</M> and maps them to the lines of <M>PG(5,3)</M>.
<Example>
<#Include SYSTEM "../examples/include/morphisms_fieldreduc1.include"> 
</Example>

Suppose we have field reduction from a polar space <Alt Not="HTML"><M>P_1</M></Alt><Alt Only="HTML">
P&lt;sub>1&lt;/sub></Alt> to a polar space <Alt Not="HTML"><M>P_2</M></Alt><Alt Only="HTML">
P&lt;sub>2&lt;/sub></Alt>, and suppose that they are both defined by sesquilinear forms. 
Let <M>M</M> be the Gram matrix for the sesquilinear form
defining <Alt Not="HTML"><M>P_1</M></Alt><Alt Only="HTML">
P&lt;sub>1&lt;/sub></Alt> and let <Alt Not="HTML"><M>\{b_1,..,b_m\}</M></Alt><Alt Only="HTML">
{b&lt;sub>1&lt;/sub>,...,b&lt;sub>m&lt;/sub>}</Alt>
be a basis for the larger defining field <M>F</M> of <Alt Not="HTML"><M>P_1</M></Alt><Alt Only="HTML">
P&lt;sub>1&lt;/sub></Alt> over the smaller defining field <M>K</M> of <Alt Not="HTML"><M>P_2</M></Alt><Alt Only="HTML">
P&lt;sub>2&lt;/sub></Alt>. Now the <C>BlownUpMat</C> command takes as input a matrix <A>mat</A>
over <M>F</M> and returns the matrix of the linear transformation on the row space 
<Alt Not="HTML"><M>K^{mn}</M></Alt><Alt Only="HTML">K&lt;sup>mn&lt;/sup></Alt> with respect to
the <M>K</M>-basis whose vectors are <Alt Not="HTML"><M>\{b_1 v_1, ... b_m v_1, ..., b_mv_n\}</M></Alt>
<Alt Only="HTML">{b&lt;sub>1&lt;/sub>v&lt;sub>1&lt;/sub>,...,
b&lt;sub>m&lt;/sub>v&lt;sub>1&lt;/sub>,...,b&lt;sub>m&lt;/sub>v&lt;sub>n&lt;/sub>}</Alt>, where
<Alt Not="HTML"><M>\{v_1,..,v_n\}</M></Alt><Alt Only="HTML">
{v&lt;sub>1&lt;/sub>,...,v&lt;sub>n&lt;/sub>}</Alt> is a basis for 
<Alt Not="HTML"><M>F^n</M></Alt><Alt Only="HTML">
F&lt;sup>n&lt;/sup></Alt>. Hence if we have a totally isotropic vector 
vector <Alt Not="HTML"><M>(x_1,..,x_n)</M></Alt><Alt Only="HTML">
(x&lt;sub>1&lt;/sub>,...,x&lt;sub>n&lt;/sub>)</Alt> with relation to the form defining 
<Alt Not="HTML"><M>P_1</M></Alt><Alt Only="HTML">P&lt;sub>1&lt;/sub></Alt>
then the blow-up of <M>x</M> will be totally isotropic with relation to the form defining 
<Alt Not="HTML"><M>P_2</M></Alt><Alt Only="HTML">
P&lt;sub>2&lt;/sub></Alt> if and only if
for all 
<Alt Not="HTML"><M>i,j \in \{1,...,m\}</M></Alt><Alt Only="HTML">i,j &#8712; {1,...,m}</Alt>, we have
<Alt Only="HTML">
&lt;table cellspacing=0 class="first">
&lt;tr align="center">
	&lt;td>&lt;small>&nbsp; n &nbsp;&lt;/small>&lt;br>
		&lt;big>&lt;big>&#8721;&lt;/big>&lt;/big>&lt;br>
		&lt;small> k &lt;small>&nbsp;&lt;/small>=&lt;small>&nbsp;&lt;/small> 1 &lt;/small>&lt;/td>
	&lt;td> Coeff(x&lt;sub>k&lt;/sub>b&lt;sub>i&lt;/sub>)&#183;Coeff(M&lt;sub>k&lt;/sub> &#183; xb&lt;sub>j&lt;/sub>)=0  &lt;/td>
&lt;/tr>
&lt;/table>
</Alt><Alt Not="HTML">
<Display>\sum_{k=1}^n Coeff(x_kb_i)\cdot Coeff(M_k\cdot x b_j)=0</Display></Alt>
where <M>Coeff</M> is the map which takes the coefficients of an element of <M>F</M> with respect to
<Alt Not="HTML"><M>\{b_1,..,b_m\}</M></Alt><Alt Only="HTML">
{b&lt;sub>1&lt;/sub>,...,b&lt;sub>m&lt;/sub>}</Alt>, and <Alt Not="HTML"><M>M_k</M></Alt><Alt Only="HTML">
M&lt;sub>k&lt;/sub></Alt> is the k-th row of <M>M</M>.

<Par></Par>
In this example, we consider the image of the Hermitian variety <M>H(2,25)</M> in <Alt Not="HTML"><M>Q^-(5,5)</M></Alt><Alt Only="HTML">
Q&lt;sup>-&lt;/sup>(5,5)</Alt>.
<Example>
<#Include SYSTEM "../examples/include/morphisms_fieldreduc2.include"> 
</Example>
</Description>
</ManSection>

<ManSection>
<Oper Name="BlownUpProjectiveSpace" Arg="basis, pg1"/>
<Returns>a projective space</Returns>
<Description>
Blows up the projective space <A>pg1</A> with respect to the <A>basis</A> using field reduction. 
If the argument <A>pg1</A> is has projective dimension <M>r-1</M> over the finite field 
<Alt Not="HTML"><M>GF(q^t)</M></Alt><Alt Only="HTML">
GF(q&lt;sup>t&lt;/sup>)</Alt>, and <A>basis</A> is a basis of <Alt Not="HTML"><M>GF(q^t)</M></Alt><Alt Only="HTML">
GF(q&lt;sup>t&lt;/sup>)</Alt> over <M>GF(q)</M>, 
then this functions returns a projective space of dimension <M>rt-1</M> over GF(q).
</Description>
</ManSection>

<ManSection>
<Oper Name="BlownUpProjectiveSpaceBySubfield" Arg="subfield,pg"/>
<Returns>a projective space</Returns>
<Description>
Blows up a projective space <A>pg</A> with respect to the standard basis of the basefield of <A>pg</A> over the <A>subfield</A>.
</Description>
</ManSection>

<ManSection>
<Oper Name="BlownUpSubspaceOfProjectiveSpace" Arg="basis,subspace"/>
<Returns>a subspace of a projective space</Returns>
<Description>
Blows up a <A>subspace</A> of a projective space with respect to the <A>basis</A> using field reduction and returns it a subspace of the projective space obtained from blowing up the ambient projective space of <A>subspace</A> with respect to <A>basis</A> using field reduction.
</Description>
</ManSection>


<ManSection>
<Oper Name="BlownUpSubspaceOfProjectiveSpaceBySubfield" Arg="subfield,subspace"/>
<Returns>a subspace of a projective space</Returns>
<Description>
Blows up a <A>subspace</A> of a projective space with respect to the
standard basis of the basefield of <A>subspace</A> over the <A>subfield</A>, using field reduction and 
returns it a subspace of the projective space obtained from blowing up the ambient projective space of <A>subspace</A> over the subfield.
</Description>
</ManSection>


<ManSection>
<Oper Name="IsDesarguesianSpreadElement" Arg="basis,subspace"/>
<Returns>true or false</Returns>
<Description>
Checks wether the <A>subspace</A> is a subspace which is obtained from a blowing up a projective point using field reduction with respect to <A>basis</A>.
</Description>
</ManSection>

<ManSection>
<Oper Name="NaturalEmbeddingBySubField" Arg="geom1, geom2"/>
<Oper Name="NaturalEmbeddingBySubField" Arg="geom1, geom2, boolean"/>
<Returns>a geometry morphism</Returns>
<Description>
The arguments <A>geom1</A> and <A>geom2</A> are projective or polar spaces of
the same dimension. This function returns a geometry morphism representing the natural embedding
of <A>geom1</A> into <A>geom2</A> as a subfield geometry.  If <A>geom1</A>
and <A>geom2</A> are polar spaces, then the only such possible embeddings are
listed in the table below (see <Cite Key="KleidmanLiebeck"/>):


<Table Align="l|l|l">
 <Caption>Subfield embeddings of polar spaces</Caption>
  <Row>
   <Item>Polar Space 1</Item><Item>Polar Space 2</Item><Item>Conditions</Item>
  </Row>
 <HorLine/>
 <HorLine/>
  <Row>
   <Item><M>W(2n-1,q)</M></Item>
   <Item><Alt Not="HTML"><M>W(2n-1,q^a)</M></Alt><Alt Only="HTML">W(2n-1,q&lt;sup>a&lt;/sup>)</Alt></Item>
   <Item>--</Item>
  </Row> 
  <Row>
   <Item><M>W(2n-1,q)</M></Item>
   <Item><Alt Not="HTML"><M>H(2n-1,q^2)</M></Alt><Alt Only="HTML">H(2n-1,q&lt;sup>2&lt;/sup>)</Alt></Item>
   <Item>--</Item>
  </Row>  
  <Row>
   <Item><Alt Not="HTML"><M>H(d,q^2)</M></Alt><Alt Only="HTML">H(d,q&lt;sup>2&lt;/sup>)</Alt></Item>
   <Item><Alt Not="HTML"><M>H(d,q^{2r})</M></Alt><Alt Only="HTML">H(d,q&lt;sup>2r&lt;/sup>)</Alt></Item>
   <Item>r odd</Item>
  </Row>
  <Row>
   <Item><Alt Not="HTML"><M>O^\epsilon(d,q)</M></Alt><Alt Only="HTML">O&lt;sup>&#949;&lt;/sup>(d,q)</Alt></Item>
   <Item><Alt Not="HTML"><M>H(d,q^2)</M></Alt><Alt Only="HTML">H(d,q&lt;sup>2&lt;/sup>)</Alt></Item>
   <Item>q odd</Item>
  </Row>
  <Row>
   <Item><Alt Not="HTML"><M>O^\epsilon(d,q)</M></Alt><Alt Only="HTML">O&lt;sup>&#949;&lt;/sup>(d,q)</Alt></Item>
   <Item><Alt Not="HTML"><M>O^{\epsilon'}(d,q^r)</M></Alt><Alt Only="HTML">O&lt;sup>&#949;'&lt;/sup>(d,q&lt;sup>r&lt;/sup>)</Alt></Item>
   <Item><Alt Not="HTML"><M>\epsilon=(\epsilon')^r</M></Alt><Alt Only="HTML">&#949;=(&#949;')&lt;sup>r&lt;/sup></Alt></Item>
  </Row>
</Table>

The geometry morphism also comes equipped with an intertwiner (see 
<Ref Attr="Intertwiner" Style="Text"/>). The optional third argument <A>boolean</A> 
can take either <C>true</C> or
<C>false</C> as input, and then our operation will or will not compute the 
intertwiner accordingly. The user may wish that the intertwiner is not computed
when embedding into large polar spaces. The default (when calling the operation
with two arguments) is set to <C>true</C>.
Here is a simple example where the geometry morphism takes the points
of <M>PG(2,3)</M> and embeds them into <M>PG(2,9)</M>.
<Example>
<#Include SYSTEM "../examples/include/morphisms_subfield1.include"> 
</Example>
In this example, we embed <M>W(5,3)</M> in <Alt Not="HTML"><M>H(5,3^2)</M></Alt>
<Alt Only="HTML">H(5,3&lt;sup>2&lt;/sup>)</Alt>.
<Example>
<#Include SYSTEM "../examples/include/morphisms_subfield2.include"> 
</Example>
</Description>
</ManSection>


<ManSection>
<Oper Name="NaturalProjectionBySubspace" Arg="ps, v"/>
<Oper Name="NaturalProjectionBySubspaceNC" Arg="ps, v"/>
<Returns>a geometry morphism</Returns>
<Description>
The argument <A>ps</A> is a projective or polar space, and <A>v</A> is a
subspace of <A>ps</A>. In the case that <A>ps</A> is a projective space, this
operation returns a geometry morphism from the subspaces containing
<A>v</A> to the subspaces of a smaller projective space over the same
field. Similarly, if <A>ps</A> is a polar space, this operation returns a
geometry morphism from the totally singular subspaces containing <A>v</A> to a
polar space of smaller dimension, but of the same polar space type.
The operation <C>NaturalProjectionBySubspaceNC</C> performs in exactly
the same way as <C>NaturalProjectionBySubspace</C> except that there
are fewer checks such as whether <A>v</A> is a subspace of <A>ps</A>,
and whether the input of the function and preimage of the returned
geometry morphism is valid or not. We should also mention here a shorthand for
this operation which is basically and overload of the quotient operation. So,
for example, <C>SymplecticSpace(3, 3) / v</C> achieves the same thing
as <C>NaturalProjectionBySubspace(SymplecticSpace(3,3), v)</C>.
<Example>
<#Include SYSTEM "../examples/include/morphisms_projection.include"> 
</Example>
</Description>
</ManSection>

</Section>





		
<Section>
<Heading>Some special kinds of geometry morphisms</Heading>

In this section we provide some more specialised geometry morphisms,
that are commonly used in finite geometry.

		   
<ManSection>
<Oper Name="KleinCorrespondence" Arg="quadric"/>
<Returns>a geometry morphism</Returns>
<Description>
The argument <A>quadric</A> is a 5-dimensional hyperbolic quadric
<M>Q^+(5,q)</M>, and this function returns the Klein correspondence from the lines
of <M>PG(3,q)</M> to the points of <A>quadric</A>.
<Example>
<#Include SYSTEM "../examples/include/morphisms_klein.include"> 
</Example>
</Description>
</ManSection>

<ManSection>
<Oper Name="NaturalDuality" Arg="gq"/>
<Returns>a geometry morphism</Returns>
<Description>
The argument <A>gq</A> is either the symplectic generalised quadrangle
<C>W(3,q)</C> or the hermitian generalised quadrangle <C>H(3,q^2)</C>.  By the
Klein correspondence, the lines of <M>W(3,q)</M> are mapped to the points
of <M>Q(4,q)</M>, which results in a point-line duality from <M>W(3,q)</M>
onto <M>Q(4,q)</M>. Likewise, the Klein correspondence induces a duality
between <M>H(3,q^2)</M> and <M>Q^-(5,q)</M>.  At the moment, the geometry
morphism returned is a map from lines to points.  This operation does not
require that the input is the canonical version of the generalised quadrangle;
it suffices that the input has the correct polarity type.
<Example>
<#Include SYSTEM "../examples/include/morphisms_duality.include"> 
</Example>
</Description>
</ManSection>

<ManSection>
<Oper Name="ProjectiveCompletion" Arg="as"/>
<Returns>a geometry morphism</Returns>
<Description>
The argument <A>as</A> is an affine space. This operation returns an embedding
of <A>as</A> into the projective space <A>ps</A> of the same dimension, and over the same field.
For example, the point <M>(x, y, z)</M> goes to the projective point with
homogeneous coordinates <M>(1, x, y, z)</M>. An intertwiner is unnecessary, 
<F>CollineationGroup(as)</F> is a subgroup of <F>CollineationGroup(ps)</F>.
<Example>
<#Include SYSTEM "../examples/include/morphisms_completion.include"> 
</Example>
</Description>
</ManSection>





<!--
<ManSection>
<Oper Name="GrassmannMap" Arg="k, n, q"/>
<Oper Name="GrassmannMap" Arg="k, ps"/>
<Oper Name="GrassmannMap" Arg="vars"/>
<Returns>a geometry morphism</Returns>
<Description>
If one argument <A>vars</A> is given, then <A>vars</A> is the set of
k-subspaces of a projective space. If two arguments are given, then
<A>k</A> is a dimension and <A>ps</A> is a projective space. Finally,
if three arguments <A>k</A>, <A>n</A>, and <A>q</A> are given, then they
represent k-subspaces of the projective space <M>PG(n,q)</M>. Here,
k must be at least 1 but at most n-2. This operation returns a projective
algebraic variety; the Grassmann variety
<M>Gr(k,n,q)</M>.
<Example>
gap> g := GrassmannMap(lines);
&lt;geometry morphism from &lt;lines of PG(3, 3)&gt; to &lt;points of Gr(1, 3, 3)&gt;&gt;
gap> l := Random(lines);
&lt;a line in PG(3, 3)&gt;
gap> l^g;
&lt;a point in Gr(1, 3, 3)&gt;
</Example>
</Description>
</ManSection>

<ManSection>
<Oper Name="SegreMap" Arg="list"/>
<Returns>a geometry morphism</Returns>
<Description>
<Example>
</Example>
</Description>
</ManSection>

<ManSection>
<Oper Name="VeroneseMap" Arg="n, q"/>
<Oper Name="VeroneseMap" Arg="n, F"/>
<Oper Name="VeroneseMap" Arg="ps"/>
<Returns>a geometry morphism</Returns>
<Description>
<Example>
gap> pg:=ProjectiveSpace(3,3);
PG(3, 3)
gap> vmap:=VeroneseMap(pg);
&lt;geometry morphism from &lt;points of PG(3, 3)&gt; to &lt;points of Ver(9, 3)&gt;&gt;
gap> p:=Random(Points(pg));
&lt;a point in PG(3, 3)&gt;
gap> p^vmap;
&lt;a point in Ver(9, 3)&gt;
</Example>
</Description>
</ManSection>
-->


</Section>
</Chapter>
