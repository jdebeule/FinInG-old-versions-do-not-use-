gap> f := GF(3);
GF(3)
gap> id := IdentityMat(2, f);;
gap> clan := List( f, t -> t*id );;
gap> IsqClan( clan, f );
true
gap> egq := EGQByqClan( clan, f );
#I  Computed Kantor family. Now computing EGQ...
#I  Computing points from Kantor family...
#I  Computing lines from Kantor family...
&lt;EGQ of order [ 9, 3 ] and basepoint 0>
gap> elations := ElationGroup( egq );
&lt;matrix group of size 243 with 8 generators>
gap> points := Points( egq );
&lt;points of &lt;EGQ of order [ 9, 3 ] and basepoint 0>>
gap> p := Random(points);
&lt;a point of a Kantor family>
gap> x := Random(elations);
[ [ Z(3)^0, Z(3), 0*Z(3), Z(3) ], [ 0*Z(3), Z(3)^0, 0*Z(3), Z(3) ], 
  [ 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3) ], [ 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0 ] ]
gap> OnKantorFamily(p,x);
&lt;a point of a Kantor family>
gap> orbs := Orbits( elations, points, OnKantorFamily);;
gap> Collected(List( orbs, Size ));
[ [ 1, 1 ], [ 9, 4 ], [ 243, 1 ] ]
gap> blt := BLTSetByqClan( clan, f );
[ &lt;a point in Q(4, 3)>, &lt;a point in Q(4, 3)>, &lt;a point in Q(4, 3)>, 
  &lt;a point in Q(4, 3)> ]
gap> q4q := AmbientGeometry( blt[1] );
Q(4, 3)
gap> span := Join( blt );
&lt;a plane in PG(4, 3)>
gap> Print("Now we see if this BLT-set is a conic\n");
Now we see if this BLT-set is a conic
gap> ProjectiveDimension( span ); 
2
